/*
  Created by Fabrizio Di Vittorio (fdivitto2013@gmail.com) - <http://www.fabgl.com>
  Copyright (c) 2019-2022 Fabrizio Di Vittorio.
  All rights reserved.


* Please contact fdivitto2013@gmail.com if you need a commercial license.


* This library and related software is available under GPL v3.

  FabGL is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  FabGL is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with FabGL.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <Arduino.h>

#include "fabgl.h"

#include <math.h>


fabgl::VGAController DisplayController;
Canvas cv(&DisplayController);


// timings->label, &freq, &hdisp, &hsyncstart, &hsyncend, &htotal, &vdisp, &vsyncstart, &vsyncend, &vtotal, &pos
#define MDA_600x320_50Hz "\"600x320@50Hz\" 13.824 600 615 705 752 320 328 330 352 +HSync -VSync"
#define MDA_640x320_50Hz "\"640x320@50Hz\" 13.824 640 650 735 752 320 328 330 352 +HSync -VSync"
//hfront hsync hback pixels vfront vsync vback lines divy pixelclock hpolaritynegative vpolaritynegative
  //Mode myMode(15, 90, 45, 600, 8, 2, 20, 320, 1, 13824000, 1, 1);

// PS2 Keyboard CLK: Pin 33, DATA: Pin 32

#define HSYNC GPIO_NUM_5
#define VSYNC GPIO_NUM_18
#define VIDEO GPIO_NUM_19
#define HI_INTENSITY GPIO_NUM_21
// HI_Intensity is on red channel, and VIDEO is on green channel
#define MDA_BLACK Color::Black
#define MDA_WHITE Color::BrightYellow
#define MDA_GRAY Color::BrightGreen

void setup()
{
  Serial.begin(115200); delay(500); Serial.write("\n\n\n"); // DEBUG ONLY


  //DisplayController.begin(GPIO_NUM_14, GPIO_NUM_27, VIDEO, HI_INTENSITY, GPIO_NUM_26, GPIO_NUM_25, HSYNC, VSYNC);
  DisplayController.begin(HI_INTENSITY, VIDEO, GPIO_NUM_17, HSYNC, VSYNC);
  DisplayController.setResolution(MDA_640x320_50Hz);//(MDA_600x320_50Hz);
  DisplayController.moveScreen(10,5);

  DisplayController.resumeBackgroundPrimitiveExecution(); // Start maybe?
  
  fabgl::VGATimings timings2;
  if (DisplayController.convertModelineToTimings(MDA_600x320_50Hz, &timings2)){
    Serial.println("Converted Timings");
    fabgl::VGATimings  *timings = DisplayController.getResolutionTimings();
    Serial.print("hfront: "); Serial.println(timings->HFrontPorch);
    Serial.print("hsync: "); Serial.println(timings->HSyncPulse);
    Serial.print("hback: "); Serial.println(timings->HBackPorch);
    Serial.print("pixels: "); Serial.println(timings->HVisibleArea);
    Serial.print("vfront: "); Serial.println(timings->VFrontPorch);
    Serial.print("vsync: "); Serial.println(timings->VSyncPulse);
    Serial.print("vback: "); Serial.println(timings->VBackPorch);
    Serial.print("lines: "); Serial.println(timings->VVisibleArea);
    Serial.print("Freq: "); Serial.println(timings->frequency);
    Serial.print("HSync: "); Serial.println(timings->HSyncLogic);
    Serial.print("VSync: "); Serial.println(timings->VSyncLogic);
  }
  else
    Serial.println("Failed to convert timings");

  // draw background
  
  // get a font for about 40x14 text screen
  cv.selectFont(&fabgl::FONT_8x8);

  cv.setGlyphOptions(GlyphOptions().FillBackground(true));
  cv.drawText(20, 20, "Hello World!", Color::White);

  cv.setPenColor(MDA_WHITE);
  cv.setBrushColor(MDA_BLACK);
  cv.drawRectangle(0,0,DisplayController.getScreenWidth()-1,DisplayController.getScreenHeight()-1);

  // add sprites to display controller
  //DisplayController.setSprites(sprites, 3);
  Serial.print("Resolution: ");
  Serial.print(DisplayController.getScreenHeight());
  Serial.print("x");
  Serial.println(DisplayController.getScreenWidth());
  Serial.println();
}



void loop()
{
  static int64_t stime  = esp_timer_get_time();
  static int FPS        = 0;
  static int FPSCounter = 0;
  //Serial.print("looop ");
  //Serial.println(esp_timer_get_time());
  if (esp_timer_get_time() - stime > 1000000) {
    // calculate FPS
    FPS = FPSCounter;
    stime = esp_timer_get_time();
    FPSCounter = 0;
    //Serial.println("Running!");
  }
  ++FPSCounter;
  
  // display test state and FPS
  cv.setPenColor(MDA_GRAY);
  cv.setBrushColor(MDA_BLACK);
  cv.drawTextFmt(80, 5, "FPS %d", FPS);

  //delay(std::max(10, 50 - (int)count / 2));
}






